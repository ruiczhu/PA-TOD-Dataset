"""
Data structures for multi-agent dialogue processing pipeline

This module defines the core data structures used throughout the multi-agent workflow
to ensure data consistency and proper type handling.
"""

from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, field
from enum import Enum


class ProcessingStage(Enum):
    """Enumeration of processing stages in the multi-agent pipeline"""
    LOADED = "loaded"
    SCENARIO_ANALYSIS = "scenario_analysis"
    PERSONALITY_ANALYSIS = "personality_analysis"
    STATE_SIMULATION = "state_simulation"
    TRANSFORMATION = "transformation"
    EVALUATION = "evaluation"
    OPTIMIZATION = "optimization"
    COMPLETED = "completed"


@dataclass
class ScenarioInfo:
    """Structured scenario information generated by Agent 1"""
    location: str = ""
    country: str = ""
    weather: str = ""
    crowd_level: str = ""
    time_of_day: str = ""
    business_hours: str = ""
    urgency_level: str = ""
    service_complexity: str = ""
    additional_context: Dict[str, Any] = field(default_factory=dict)


@dataclass 
class UserProfile:
    """User profile information generated by Agent 2"""
    age_range: str = ""
    occupation: str = ""
    education_level: str = ""
    tech_savviness: str = ""
    communication_style: str = ""
    background: str = ""
    motivations: List[str] = field(default_factory=list)
    preferences: Dict[str, Any] = field(default_factory=dict)


@dataclass
class UserState:
    """User state information generated by Agent 3"""
    emotional_state: str = ""
    stress_level: str = ""
    patience_level: str = ""
    confidence_level: str = ""
    current_mood: str = ""
    physical_state: str = ""
    cognitive_load: str = ""
    situational_factors: Dict[str, Any] = field(default_factory=dict)


@dataclass
class EvaluationResult:
    """Personality evaluation result from Agent 5"""
    big_five_scores: Dict[str, float] = field(default_factory=dict)
    facet_scores: Dict[str, Dict[str, float]] = field(default_factory=dict)
    confidence_scores: Dict[str, float] = field(default_factory=dict)
    evaluation_notes: str = ""
    comparison_with_original: Dict[str, float] = field(default_factory=dict)


@dataclass
class ProcessingMetrics:
    """Metrics and metadata for processing tracking"""
    stage: ProcessingStage = ProcessingStage.LOADED
    processing_time: float = 0.0
    token_usage: Dict[str, int] = field(default_factory=dict)
    api_calls: int = 0
    success: bool = True
    error_message: str = ""
    agent_notes: Dict[str, str] = field(default_factory=dict)


@dataclass
class EnhancedDialogue:
    """Enhanced dialogue data structure that accumulates information through pipeline"""
    # Original data
    dialogue_id: str = ""
    services: List[str] = field(default_factory=list)
    turns: List[Dict[str, Any]] = field(default_factory=list)
    
    # Enhanced data added by agents
    scenario_info: Optional[ScenarioInfo] = None
    personality: Optional[Dict[str, Any]] = None
    user_profile: Optional[UserProfile] = None
    user_state: Optional[UserState] = None
    
    # Transformation results
    transformed_turns: List[Dict[str, Any]] = field(default_factory=list)
    optimized_turns: List[Dict[str, Any]] = field(default_factory=list)
    
    # Evaluation results
    initial_evaluation: Optional[EvaluationResult] = None
    final_evaluation: Optional[EvaluationResult] = None
    
    # Processing metadata
    processing_metrics: ProcessingMetrics = field(default_factory=ProcessingMetrics)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        return {
            "dialogue_id": self.dialogue_id,
            "services": self.services,
            "turns": self.turns,
            "scenario_info": self.scenario_info.__dict__ if self.scenario_info else None,
            "personality": self.personality,
            "user_profile": self.user_profile.__dict__ if self.user_profile else None,
            "user_state": self.user_state.__dict__ if self.user_state else None,
            "transformed_turns": self.transformed_turns,
            "optimized_turns": self.optimized_turns,
            "initial_evaluation": self.initial_evaluation.__dict__ if self.initial_evaluation else None,
            "final_evaluation": self.final_evaluation.__dict__ if self.final_evaluation else None,
            "processing_metrics": {
                "stage": self.processing_metrics.stage.value,
                "processing_time": self.processing_metrics.processing_time,
                "token_usage": self.processing_metrics.token_usage,
                "api_calls": self.processing_metrics.api_calls,
                "success": self.processing_metrics.success,
                "error_message": self.processing_metrics.error_message,
                "agent_notes": self.processing_metrics.agent_notes
            }
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'EnhancedDialogue':
        """Create from dictionary"""
        dialogue = cls()
        dialogue.dialogue_id = data.get("dialogue_id", "")
        dialogue.services = data.get("services", [])
        dialogue.turns = data.get("turns", [])
        dialogue.personality = data.get("personality")
        dialogue.transformed_turns = data.get("transformed_turns", [])
        dialogue.optimized_turns = data.get("optimized_turns", [])
        
        # Handle scenario_info
        if data.get("scenario_info"):
            dialogue.scenario_info = ScenarioInfo(**data["scenario_info"])
            
        # Handle user_profile
        if data.get("user_profile"):
            dialogue.user_profile = UserProfile(**data["user_profile"])
            
        # Handle user_state
        if data.get("user_state"):
            dialogue.user_state = UserState(**data["user_state"])
            
        # Handle evaluations
        if data.get("initial_evaluation"):
            dialogue.initial_evaluation = EvaluationResult(**data["initial_evaluation"])
        if data.get("final_evaluation"):
            dialogue.final_evaluation = EvaluationResult(**data["final_evaluation"])
            
        return dialogue
